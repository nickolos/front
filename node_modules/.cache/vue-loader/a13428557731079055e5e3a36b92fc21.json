{"remainingRequest":"/home/nick/Документы/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nick/Документы/front/src/components/order/EditOrder.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nick/Документы/front/src/components/order/EditOrder.vue","mtime":1550446216491},{"path":"/home/nick/Документы/front/node_modules/cache-loader/dist/cjs.js","mtime":1550345624276},{"path":"/home/nick/Документы/front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nick/Документы/front/node_modules/cache-loader/dist/cjs.js","mtime":1550345624276},{"path":"/home/nick/Документы/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import {HTTP} from '@/util/http'\n    import toast from '@/util/toast'\n    export default {\n        name: \"editOrder\",\n        props: ['order'],\n    data () {\n        return {\n            errors: [],\n            datetime13: this.order.datetime13,\n            toAddress: this.order.toAddress,\n            fromAddress :this.order.fromAddress\n        }\n    },\n    methods: {\n        checkForm(e) {\n            this.errors = [];\n            if (!this.toAddress) {\n                this.errors.push(\"Where we go?\")\n            } else if (!this.fromAddress) {\n                this.errors.push(\"From where we are going?\")\n            }\n            if (!this.errors.length) {\n                this.submitUpdateOrder()\n                this.datetime13,\n                    this.toAddress,\n                    this.fromAddress\n            }\n            e.preventDefault()\n        },\n        submitUpdateOrder(retry = true) {\n            HTTP.patch('taxi/order/taxi/' + this.order.UID, JSON.stringify({\n                \"user_id\": localStorage.getItem(UID),\n                \"user_name\": this.login.username,\n                'time': this.datetime13.toString(),\n                'from_address': this.fromAddress,\n                \"to_address\": this.toAddress\n            }), {headers: {'Authorization': 'Bearer ' + localStorage.getItem('accessToken')}})\n                .then(() => {\n                    toast.success('Order updated')\n                    this.$parent.closeEditForm()\n                })\n               // .catch(error => {\n                    // if (retry && error.response.status === 403) {\n                    //     if (localStorage.getItem('refreshToken')) {\n                    //         this.$store.dispatch('refresh')\n                    //         this.submitPost(retry = false)\n                    //     } else {\n                    //         this.$store.dispatch('logout')\n                    //         this.$router.push('/login/')\n                    //     }\n                    // }\n                    toast.error(error.message)\n             //   })\n        },\n        cancel() {\n            this.$parent.closeEditForm()\n        }\n    }\n}\n",{"version":3,"sources":["EditOrder.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditOrder.vue","sourceRoot":"src/components/order","sourcesContent":["<template>\n    <div class=\"container\">\n        <form @submit=\"checkForm\" novalidate=\"true\">\n            <div class=\"row error\" v-if=\"errors.length\">\n                <b>Please correct the following error(s):</b>\n                <ul>\n                    <li v-for=\"error in errors\" :key=\"error\">{{ error }}</li>\n                </ul>\n            </div>\n            <p>\n                <label>Input Time</label>\n                <datetime type=\"datetime\" v-model=\"datetime13\" format=\"yyyy-MM-dd HH:mm:ss\" name =\"datetime13\"></datetime>\n            </p>\n\n            <p>\n                <label for=\"toAddress\">Input To Address</label>\n                <input id=\"toAddress\" v-model=\"toAddress\" type=\"text\" name=\"toAddress\">\n            </p>\n\n            <p>\n                <label for=\"fromAddress\">Input To Address</label>\n                <input id=\"fromAddress\" v-model=\"fromAddress\" type=\"text\" name=\"fromAddress\">\n            </p>\n\n            <p>\n                <input class=\"button-primary\" type=\"submit\"  value=\"Change\">\n            </p>\n            <p>\n            <div class=\"button button-outline\" style=\"margin-left:10px;\" @click=\"cancel\">Cancel</div>\n        </form>\n    </div>\n</template>\n\n<script>\n    import {HTTP} from '@/util/http'\n    import toast from '@/util/toast'\n    export default {\n        name: \"editOrder\",\n        props: ['order'],\n    data () {\n        return {\n            errors: [],\n            datetime13: this.order.datetime13,\n            toAddress: this.order.toAddress,\n            fromAddress :this.order.fromAddress\n        }\n    },\n    methods: {\n        checkForm(e) {\n            this.errors = [];\n            if (!this.toAddress) {\n                this.errors.push(\"Where we go?\")\n            } else if (!this.fromAddress) {\n                this.errors.push(\"From where we are going?\")\n            }\n            if (!this.errors.length) {\n                this.submitUpdateOrder()\n                this.datetime13,\n                    this.toAddress,\n                    this.fromAddress\n            }\n            e.preventDefault()\n        },\n        submitUpdateOrder(retry = true) {\n            HTTP.patch('taxi/order/taxi/' + this.order.UID, JSON.stringify({\n                \"user_id\": localStorage.getItem(UID),\n                \"user_name\": this.login.username,\n                'time': this.datetime13.toString(),\n                'from_address': this.fromAddress,\n                \"to_address\": this.toAddress\n            }), {headers: {'Authorization': 'Bearer ' + localStorage.getItem('accessToken')}})\n                .then(() => {\n                    toast.success('Order updated')\n                    this.$parent.closeEditForm()\n                })\n               // .catch(error => {\n                    // if (retry && error.response.status === 403) {\n                    //     if (localStorage.getItem('refreshToken')) {\n                    //         this.$store.dispatch('refresh')\n                    //         this.submitPost(retry = false)\n                    //     } else {\n                    //         this.$store.dispatch('logout')\n                    //         this.$router.push('/login/')\n                    //     }\n                    // }\n                    toast.error(error.message)\n             //   })\n        },\n        cancel() {\n            this.$parent.closeEditForm()\n        }\n    }\n}\n</script>\n"]}]}