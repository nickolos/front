{"remainingRequest":"/home/nick/Документы/front/node_modules/babel-loader/lib/index.js!/home/nick/Документы/front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/nick/Документы/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/nick/Документы/front/src/views/Comments.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/nick/Документы/front/src/views/Comments.vue","mtime":1550356378850},{"path":"/home/nick/Документы/front/node_modules/cache-loader/dist/cjs.js","mtime":1550345624276},{"path":"/home/nick/Документы/front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nick/Документы/front/node_modules/cache-loader/dist/cjs.js","mtime":1550345624276},{"path":"/home/nick/Документы/front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _objectSpread from \"/home/nick/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/front/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vuex from 'vuex';\nimport { HTTP } from '@/util/http';\nimport toast from '@/util/toast';\nimport Post from '@/components/post/Show.vue';\nimport Comment from '@/components/comment/Show.vue';\nimport SubmitCommentForm from '@/components/comment/OrderTaxi.vue';\nexport default {\n  name: 'comments',\n  components: {\n    Comment: Comment,\n    Post: Post,\n    SubmitCommentForm: SubmitCommentForm\n  },\n  props: {\n    type: String\n  },\n  data: function data() {\n    return {\n      post: null,\n      comments: null,\n      editing: false,\n      pageNumber: null,\n      pageSize: null,\n      itemsLoaded: 0\n    };\n  },\n  computed: _objectSpread({}, Vuex.mapGetters(['isLoggedIn'])),\n  created: function created() {\n    this.fetchData();\n  },\n  watch: {\n    '$route': 'fetchData'\n  },\n  methods: {\n    fetchData: function fetchData() {\n      this.fetchPost();\n      this.fetchComments(0, 10);\n    },\n    fetchPost: function fetchPost() {\n      var _this = this;\n\n      HTTP.get('posts/' + this.$route.params.uid).then(function (response) {\n        _this.post = response.data;\n      }).catch(function (error) {\n        if (error.response.status == 422) _this.$router.push('/422');\n        if (error.response.status == 404) _this.$router.push('/404');\n        toast.error(error.message);\n      });\n    },\n    fetchComments: function fetchComments(pageNumber, pageSize) {\n      var _this2 = this;\n\n      HTTP.get('posts/' + this.$route.params.uid + '/comments/', {\n        params: {\n          size: pageSize,\n          page: pageNumber\n        }\n      }).then(function (response) {\n        _this2.comments = response.data.Comments;\n        _this2.itemsLoaded = _this2.comments.length;\n        _this2.pageNumber = response.data.PageNumber;\n        _this2.pageSize = response.data.PageSize;\n      }).catch(function (error) {\n        toast.error(error.message);\n      });\n    },\n    deleteComment: function deleteComment(postUID, commentUID) {\n      for (var i = 0; i < this.comments.length; i++) {\n        if (this.comments[i].UID == commentUID) {\n          this.$delete(this.comments, i);\n        }\n      }\n    },\n    loadPrevious: function loadPrevious() {\n      this.fetchComments(this.pageNumber - 1);\n    },\n    loadNext: function loadNext() {\n      this.fetchComments(this.pageNumber + 1);\n    },\n    showCommentForm: function showCommentForm() {\n      this.editing = true;\n    },\n    closeCommentForm: function closeCommentForm() {\n      this.editing = false;\n      this.fetchComments();\n    }\n  }\n};",{"version":3,"sources":["Comments.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"row\">\n      <post v-if=\"post\" :post=\"post\"></post>\n    </div>\n    <div v-if=\"isLoggedIn\" class=\"button float-left\" @click=\"showCommentForm\">New comment</div>\n    <div class=\"row\">\n      <div v-if=\"editing\">\n        <submitCommentForm :postUID=\"post.UID\"></submitCommentForm>\n      </div>\n    </div>\n    <div class=\"column\" v-if=\"comments && comments.length > 0\">\n      <comment v-for=\"comment in comments\" :key=\"comment.UID\" :comment=\"comment\"></comment>\n    </div>\n    <div class=\"row\" v-else>No comments yet</div>\n    <button v-show=\"pageNumber > 0\" @click=\"loadPrevious\">&lt;</button>\n    <button v-if=\"itemsLoaded == pageSize\" @click=\"loadNext\" style=\"margin-left:10px;\">&gt;</button>\n  </div>\n</template>\n\n<script>\nimport Vuex from 'vuex'\n\nimport {HTTP} from '@/util/http'\nimport toast from '@/util/toast'\n\nimport Post from '@/components/post/Show.vue'\nimport Comment from '@/components/comment/Show.vue'\nimport SubmitCommentForm from '@/components/comment/OrderTaxi.vue'\n\nexport default {\n  name: 'comments',\n  components: {\n    Comment,\n    Post,\n    SubmitCommentForm\n  },\n  props: {\n    type: String\n  },\n  data () {\n    return {\n      post: null,\n      comments: null,\n      editing: false,\n      pageNumber: null,\n      pageSize: null,\n      itemsLoaded: 0\n    }\n  },\n  computed: {\n    ...Vuex.mapGetters(['isLoggedIn'])\n  },\n  created () {\n    this.fetchData()\n  },\n  watch: {\n    '$route': 'fetchData'\n  },\n  methods: {\n    fetchData() {\n      this.fetchPost()\n      this.fetchComments(0, 10)\n    },\n    fetchPost() {\n      HTTP.get('posts/' + this.$route.params.uid)\n      .then(response => {\n        this.post = response.data\n      })\n      .catch(error => {\n        if (error.response.status == 422)\n          this.$router.push('/422')\n        if (error.response.status == 404)\n          this.$router.push('/404')\n        toast.error(error.message)\n      })\n    },\n    fetchComments(pageNumber, pageSize) {\n      HTTP.get('posts/' + this.$route.params.uid + '/comments/', {\n        params: {\n          size: pageSize,\n          page: pageNumber\n        }\n      })\n      .then(response => {\n        this.comments = response.data.Comments\n        this.itemsLoaded = this.comments.length\n        this.pageNumber = response.data.PageNumber\n        this.pageSize = response.data.PageSize\n      })\n      .catch(error => {\n        toast.error(error.message)\n      })\n    },\n    deleteComment(postUID, commentUID) {\n      for (var i = 0; i < this.comments.length; i++) {\n        if (this.comments[i].UID == commentUID) {\n          this.$delete(this.comments, i)\n        }\n      }\n    },\n    loadPrevious() {\n      this.fetchComments(this.pageNumber - 1)\n    },\n    loadNext() {\n      this.fetchComments(this.pageNumber + 1)\n    },\n    showCommentForm() {\n      this.editing = true\n    },\n    closeCommentForm() {\n      this.editing = false\n      this.fetchComments()\n    }\n  }\n}\n</script>\n\n<style>\n.noborder * {\n  border: 0px\n}\n</style>\n"],"sourceRoot":"src/views"}]}