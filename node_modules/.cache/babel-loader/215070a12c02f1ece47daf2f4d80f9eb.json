{"remainingRequest":"/home/nick/Документы/front/node_modules/babel-loader/lib/index.js!/home/nick/Документы/front/node_modules/eslint-loader/index.js??ref--13-0!/home/nick/Документы/front/src/store.js","dependencies":[{"path":"/home/nick/Документы/front/src/store.js","mtime":1550443399268},{"path":"/home/nick/Документы/front/node_modules/cache-loader/dist/cjs.js","mtime":1550345624276},{"path":"/home/nick/Документы/front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/nick/Документы/front/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// import Vue from 'vue'\n// import Vuex from 'vuex'\n//\n// import {HTTP} from '@/util/http'\n// import toast from '@/util/toast'\n//\n// Vue.use(Vuex);\n//\n// const LOGIN = 'LOGIN'\n// const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\n// const LOGOUT = 'LOGOUT'\n//\n// export default new Vuex.Store({\n//   state: {\n//     pending: false,\n//     isLoggedIn: localStorage.getItem('accessToken')\n//   },\n//   mutations: {\n//     [LOGIN] (state) {\n//       state.pending = true;\n//     },\n//     [LOGIN_SUCCESS] (state) {\n//       state.isLoggedIn = true;\n//       state.pending = false;\n//     },\n//     [LOGOUT](state) {\n//       state.isLoggedIn = false;\n//     }\n//   },\n//   actions: {\n//     login({ commit }, payload) {\n//       return new Promise(resolve => {\n//         commit(LOGIN)\n//         HTTP.post('auth/token', JSON.stringify({'username': payload['username'], 'password': payload['password'], 'refresh': payload['refresh']}))\n//         .then(response => {\n//           toast.success('Logged in')\n//           localStorage.setItem('accessToken', response.data['AccessToken'])\n//           localStorage.setItem('UID', response.data['UID'])\n//           if (response.data['RefreshToken']) {\n//             localStorage.setItem('refreshToken', response.data['RefreshToken'])\n//           }\n//           localStorage.setItem('username', payload['username'])\n//           resolve()\n//           commit(LOGIN_SUCCESS)\n//         })\n//         .catch(error => {\n//           toast.error(error.message)\n//         })\n//       })\n//     },\n//     logout({ commit }) {\n//       localStorage.removeItem('accessToken')\n//       localStorage.removeItem('UID')\n//       localStorage.removeItem('refreshToken')\n//       localStorage.removeItem('username')\n//       commit(LOGOUT);\n//     },\n//     refresh() {\n//       HTTP.post('auth/refresh', JSON.stringify({'token': localStorage.getItem('refreshToken')}))\n//       .then(response => {\n//         localStorage.setItem('accessToken', response.data['AccessToken'])\n//         if (response.data['RefreshToken']) {\n//           localStorage.setItem(\"refreshToken\", response.data['RefreshToken'])\n//         }\n//       })\n//       .catch(error => {\n//         toast.error(error.message)\n//       })\n//     }\n//  },\n//  getters: {\n//   isLoggedIn: state => {\n//     return state.isLoggedIn\n//    }\n//   }\n// });",{"version":3,"sources":["/home/nick/Документы/front/src/store.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import Vue from 'vue'\n// import Vuex from 'vuex'\n//\n// import {HTTP} from '@/util/http'\n// import toast from '@/util/toast'\n//\n// Vue.use(Vuex);\n//\n// const LOGIN = 'LOGIN'\n// const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\n// const LOGOUT = 'LOGOUT'\n//\n// export default new Vuex.Store({\n//   state: {\n//     pending: false,\n//     isLoggedIn: localStorage.getItem('accessToken')\n//   },\n//   mutations: {\n//     [LOGIN] (state) {\n//       state.pending = true;\n//     },\n//     [LOGIN_SUCCESS] (state) {\n//       state.isLoggedIn = true;\n//       state.pending = false;\n//     },\n//     [LOGOUT](state) {\n//       state.isLoggedIn = false;\n//     }\n//   },\n//   actions: {\n//     login({ commit }, payload) {\n//       return new Promise(resolve => {\n//         commit(LOGIN)\n//         HTTP.post('auth/token', JSON.stringify({'username': payload['username'], 'password': payload['password'], 'refresh': payload['refresh']}))\n//         .then(response => {\n//           toast.success('Logged in')\n//           localStorage.setItem('accessToken', response.data['AccessToken'])\n//           localStorage.setItem('UID', response.data['UID'])\n//           if (response.data['RefreshToken']) {\n//             localStorage.setItem('refreshToken', response.data['RefreshToken'])\n//           }\n//           localStorage.setItem('username', payload['username'])\n//           resolve()\n//           commit(LOGIN_SUCCESS)\n//         })\n//         .catch(error => {\n//           toast.error(error.message)\n//         })\n//       })\n//     },\n//     logout({ commit }) {\n//       localStorage.removeItem('accessToken')\n//       localStorage.removeItem('UID')\n//       localStorage.removeItem('refreshToken')\n//       localStorage.removeItem('username')\n//       commit(LOGOUT);\n//     },\n//     refresh() {\n//       HTTP.post('auth/refresh', JSON.stringify({'token': localStorage.getItem('refreshToken')}))\n//       .then(response => {\n//         localStorage.setItem('accessToken', response.data['AccessToken'])\n//         if (response.data['RefreshToken']) {\n//           localStorage.setItem(\"refreshToken\", response.data['RefreshToken'])\n//         }\n//       })\n//       .catch(error => {\n//         toast.error(error.message)\n//       })\n//     }\n//  },\n//  getters: {\n//   isLoggedIn: state => {\n//     return state.isLoggedIn\n//    }\n//   }\n// });"]}]}